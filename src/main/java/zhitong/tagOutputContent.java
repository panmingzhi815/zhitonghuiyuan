package zhitong;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagOutputContent extends Structure<tagOutputContent, tagOutputContent.ByValue, tagOutputContent.ByReference > {
	/** \u662f\u5426\u8f93\u51fa\u5927\u56fe */
	public byte bOutputBigImage;
	/** \u662f\u5426\u8f93\u51faCIF\u56fe */
	public byte bOutputCIFImage;
	/** \u662f\u5426\u8f93\u51fa\u8f66\u724c\u56fe */
	public byte bOutputPlateImage;
	public tagOutputContent() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("bOutputBigImage", "bOutputCIFImage", "bOutputPlateImage");
	}
	public tagOutputContent(byte bOutputBigImage, byte bOutputCIFImage, byte bOutputPlateImage) {
		super();
		this.bOutputBigImage = bOutputBigImage;
		this.bOutputCIFImage = bOutputCIFImage;
		this.bOutputPlateImage = bOutputPlateImage;
	}
	public tagOutputContent(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected tagOutputContent newInstance() { return new tagOutputContent(); }
	public static tagOutputContent[] newArray(int arrayLength) {
		return Structure.newArray(tagOutputContent.class, arrayLength);
	}
	public static class ByReference extends tagOutputContent implements Structure.ByReference {
		
	};
	public static class ByValue extends tagOutputContent implements Structure.ByValue {
		
	};
}
