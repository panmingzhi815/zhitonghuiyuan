package zhitong;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagVersionInfo extends Structure<tagVersionInfo, tagVersionInfo.ByValue, tagVersionInfo.ByReference > {
	/** \u4e3b\u7248\u672c */
	public byte[] ucMainVer = new byte[255];
	/** \u6b21\u7248\u672c */
	public byte[] ucDSPVer = new byte[255];
	/** MCU\u7248\u672c */
	public byte[] ucMCUVer = new byte[255];
	/** \u8bc6\u522b\u7b97\u6cd5\u7248\u672c */
	public byte[] ucOCRVer = new byte[255];
	/** EEPROM\u7248\u672c\u53f7 */
	public byte[] ucEPROMVer = new byte[255];
	public tagVersionInfo() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("ucMainVer", "ucDSPVer", "ucMCUVer", "ucOCRVer", "ucEPROMVer");
	}
	public tagVersionInfo(byte ucMainVer[], byte ucDSPVer[], byte ucMCUVer[], byte ucOCRVer[], byte ucEPROMVer[]) {
		super();
		if ((ucMainVer.length != this.ucMainVer.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ucMainVer = ucMainVer;
		if ((ucDSPVer.length != this.ucDSPVer.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ucDSPVer = ucDSPVer;
		if ((ucMCUVer.length != this.ucMCUVer.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ucMCUVer = ucMCUVer;
		if ((ucOCRVer.length != this.ucOCRVer.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ucOCRVer = ucOCRVer;
		if ((ucEPROMVer.length != this.ucEPROMVer.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ucEPROMVer = ucEPROMVer;
	}
	public tagVersionInfo(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected tagVersionInfo newInstance() { return new tagVersionInfo(); }
	public static tagVersionInfo[] newArray(int arrayLength) {
		return Structure.newArray(tagVersionInfo.class, arrayLength);
	}
	public static class ByReference extends tagVersionInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends tagVersionInfo implements Structure.ByValue {
		
	};
}
